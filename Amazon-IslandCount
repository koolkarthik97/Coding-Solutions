import java.util.*;

class Solution {
    static boolean visited[][];
    static int[] ROW=new int[]{0,0,1,-1};
    static int[] COL=new int[]{-1,+1,0,0};

    public static void main(String args[]) {
        char[][] grid = new char[][]{"11110".toCharArray(),
                "11010".toCharArray(),
                "11000".toCharArray(),
                "00000".toCharArray()
        };

        int m=grid.length;
        int n=grid[0].length;

        visited=new boolean[m][n];
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1' && visited[i][j]==false){
                    dfs(grid,i,j);
                }
            }
        }
        System.out.println(count);
    }

    private static void dfs(char[][] grid, int s_i, int s_j) {
        visited[s_i][s_j]=true;
        for(int i=0;i<4;i++){
            int r=ROW[i]+s_i;
            int c=COL[i]+s_j;
            if(r>=0 && r<grid.length && c>=0 && c<grid[0].length && visited[r][c]==false && grid[r][c]=='1')
                dfs(grid,r,c);
        }
    }

}
